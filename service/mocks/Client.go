// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	io "io"

	mock "github.com/stretchr/testify/mock"

	models "github.com/chrisccoy/go-atlassian/pkg/infra/models"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Call provides a mock function with given fields: request, structure
func (_m *Client) Call(request *http.Request, structure interface{}) (*models.ResponseScheme, error) {
	ret := _m.Called(request, structure)

	var r0 *models.ResponseScheme
	if rf, ok := ret.Get(0).(func(*http.Request, interface{}) *models.ResponseScheme); ok {
		r0 = rf(request, structure)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResponseScheme)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request, interface{}) error); ok {
		r1 = rf(request, structure)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFormRequest provides a mock function with given fields: ctx, method, apiEndpoint, contentType, payload
func (_m *Client) NewFormRequest(ctx context.Context, method string, apiEndpoint string, contentType string, payload io.Reader) (*http.Request, error) {
	ret := _m.Called(ctx, method, apiEndpoint, contentType, payload)

	var r0 *http.Request
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, io.Reader) *http.Request); ok {
		r0 = rf(ctx, method, apiEndpoint, contentType, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, io.Reader) error); ok {
		r1 = rf(ctx, method, apiEndpoint, contentType, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRequest provides a mock function with given fields: ctx, method, apiEndpoint, payload
func (_m *Client) NewRequest(ctx context.Context, method string, apiEndpoint string, payload io.Reader) (*http.Request, error) {
	ret := _m.Called(ctx, method, apiEndpoint, payload)

	var r0 *http.Request
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader) *http.Request); ok {
		r0 = rf(ctx, method, apiEndpoint, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader) error); ok {
		r1 = rf(ctx, method, apiEndpoint, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransformStructToReader provides a mock function with given fields: structure
func (_m *Client) TransformStructToReader(structure interface{}) (io.Reader, error) {
	ret := _m.Called(structure)

	var r0 io.Reader
	if rf, ok := ret.Get(0).(func(interface{}) io.Reader); ok {
		r0 = rf(structure)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(structure)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransformTheHTTPResponse provides a mock function with given fields: response, structure
func (_m *Client) TransformTheHTTPResponse(response *http.Response, structure interface{}) (*models.ResponseScheme, error) {
	ret := _m.Called(response, structure)

	var r0 *models.ResponseScheme
	if rf, ok := ret.Get(0).(func(*http.Response, interface{}) *models.ResponseScheme); ok {
		r0 = rf(response, structure)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResponseScheme)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Response, interface{}) error); ok {
		r1 = rf(response, structure)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewClientT interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t NewClientT) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
